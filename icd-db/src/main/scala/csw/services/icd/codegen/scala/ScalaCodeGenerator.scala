package csw.services.icd.codegen.scala

import csw.services.icd.db.{CachedIcdDbQuery, CachedIcdVersionManager, ComponentInfoHelper, IcdDb, IcdVersionManager}
import icd.web.shared.{ComponentInfo, SubsystemWithVersion}

import java.io.{File, PrintWriter}

class ScalaCodeGenerator(db: IcdDb, error: String => Unit) {

  private def sourceForComponent(info: ComponentInfo): String = {
    val comment = s"/** API for ${info.componentModel.componentType}: ${info.componentModel.subsystem}.${info.componentModel.component} */"
    val prefix = s"val prefix: Prefix = Prefix(Subsystem.${info.componentModel.subsystem.toUpperCase()}, \"${info.componentModel.component}\")"
    val eventKeys = info.publishes.toList.flatMap { p =>
      val events = p.eventList.map { e =>
        s"""
           |/**
           | * ${e.eventModel.description}
           | */
           |val `${e.eventModel.name}EventKey`: EventKey = EventKey(prefix, EventName(\"${e.eventModel.name}\"))
           |""".stripMargin
      }
//      val currentStates = p.currentStateList.map { e =>
//        s"EventKey(prefix, EventName(${e.eventModel.name}))"
//      }
      events
    }
    s"""
       |$comment
       |object `${info.componentModel.component}Api` {
       |$prefix
       |
       |${eventKeys.mkString("\n")}
       |}
       |""".stripMargin
  }

  /**
   * Generates a source file with the API for the given subsystem / component (or all components)
   * @param subsystemStr a string containing the subsystem, possibly followed by a ':' and the version
   * @param maybeComponent optional component name (default: all subsystem components)
   * @param sourceFile generate code in this file
   * @param maybePackage optional package name for Scala and Java files
   */
  def generate(subsystemStr: String, maybeComponent: Option[String], sourceFile: File, maybePackage: Option[String]): Unit = {
    import sys.process._
    val s              = IcdVersionManager.SubsystemAndVersion(subsystemStr)
    val sv             = SubsystemWithVersion(s.subsystem, s.maybeVersion, maybeComponent)
    val query          = new CachedIcdDbQuery(db.db, db.admin, Some(List(sv.subsystem)), None)
    val versionManager = new CachedIcdVersionManager(query)
    val subsystemModel = db.versionManager.getSubsystemModel(sv, None)
    val infoList = new ComponentInfoHelper(false, false, maybeStaticHtml = Some(true))
      .getComponentInfoList(versionManager, sv, None)
    val defs      = infoList.map(sourceForComponent)
    val className = sourceFile.getName.stripSuffix(".scala")
    val packageDef = maybePackage.map(p => s"package $p").getOrElse("")
    val f         = new PrintWriter(sourceFile)
    f.println(s"""$packageDef
        |// This file contains an API for the $subsystemStr subsystem and was generated by the icd-db command.
        |// DO NOT EDIT.
        |// See https://github.com/tmtsoftware/icd for more information.
        |
        |import csw.params.events.{Event, EventKey, EventName, SystemEvent}
        |import csw.prefix.models.{Prefix, Subsystem}
        |import csw.params.core.generics.{Key, KeyType}
        |
        |/**
        | * Top level API for subsystem: $subsystemStr
        | *
        | * ${subsystemModel.map(_.description).getOrElse("")}
        | */
        |object $className {
        |${defs.mkString("\n")}
        |}
        |""".stripMargin)
    f.close()
    try {
      s"scalafmt $sourceFile".!
    } catch {
      case ex: Exception =>
    }
  }
}
