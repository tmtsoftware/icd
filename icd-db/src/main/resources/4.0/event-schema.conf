id: "http://csw.tmt.org/event-schema#"
"$schema": "http://json-schema.org/draft-07/schema#"

description = "Describes event items that are published by the component"
type = object
oneOf: [
  // require either a parameter list or a ref that points to another event
  {required: [name, parameters]}
  {required: [name, ref]}
]
additionalProperties: false

properties {
  name {
    type = string
    description = "Name of the event without prefix"
  }

  diagnosticModes {
    description = "States that the event is only fired in the given diagnostic modes."
    type = array
    minItems = 1
    uniqueItems = true
    items {
      type = string
    }
  }

  // Event Categories:
  //
  // DEMAND = an event that is used to transmit a desired position.
  // These events are high frequency/periodic and should not be archived long-term or
  // should be seriously curated into a smaller representative collection.
  //
  // CONTROL = similar to a DEMAND, but probably not periodic and considerably less frequent.
  // CONTROL events are events driving other devices, but may be internal to a system. These also may be curated.
  //
  // EVENT = an event is used to indicate that something has happened.  Observe Events are one EVENT type.
  //
  // STATUS = a STATUS  event is used primarily to update a user interface.
  // These events are archived.  They are not high frequency and are not periodic.
  category {
    enum = [DEMAND, CONTROL, EVENT, STATUS]
    description = "Category of the event (defaults to STATUS)"
  }

  description {
    type = string
    description = "A description of this event"
  }
  ref: {
    type: string
    description = "A reference to another event to copy any missing definitions from, in the form $componentName/events/$eventName (May be abbreviated if in same section/component: See docs.)"
  }
  requirements {
    description = "List of requirements that flow to this item"
    type = array
    minItems = 1
    uniqueItems = true
    items {
      type = string
    }
  }
  maxRate = {
    type = number
    description = "Maximum rate of publishing in Hz"
  }
  archive = {
    description = "Publisher recommends archiving this event"
    type = boolean
  }
  archiveDuration = {
    type = string
    description = "Lifetime of the archiving (example: '2 years', '6 months'): Required if archive is true."
  }
  parameters = {
    "$ref": "classpath:/4.0/parameters-schema.conf"
  }
}
