subsystem = TEST
component = lgsWfs

description = "Example Commands ..."

receive = [

  {
    name = LGS_WFS_INITIALIZE
    description = """
       |LGS_WFS_INITIALIZE command will:
       |
       |* disable the LGS WFS engineering continuous read mode (if required)
       |* (re)connect to the LGS WFS HCD
       |* set LGS WFS exposure parameters to default values
    """
    requirements = ["INT-TEST-AOESW-1000"]
    parameters = [
      {
        name = wfsUsed
        description = "OIWFS used"
        type = string
      }
      {
        // Example reference to another arg in this command
        name = wfsUsed2
        ref = wfsUsed
      }
      {
        // Example reference to another arg in this command (using bad ref in order to produce an error in the generated HTML/PDF)
        name = wfsUsed2Error
        ref = wfsUsedXXX
      }
      {
        // Example reference to an event attribute, to reuse the attribute as a command arg
        name = modeCommandTest
        ref = events/engMode/parameters/mode
      }
    ]
    completionType = oneway
    completionCondition = [
      "List of conditions to meet for oneway command to be complete...",
      "condition two",
      "condition three"
    ]
  }
  {
    // Test reference to other command in same component
    name = LGS_WFS_INITIALIZE_REF
    ref = LGS_WFS_INITIALIZE
    description = "Test ref to other command in same component"
    completionCondition = ["Different condition"]
  }
  {
    name = LGS_WFS_STOP
    description = """
       |LGS_WFS_STOP command will disable the continuous read mode for LGS WFS detector, and abort any current exposures,
       |initiated by the NCC, on any LGS WFS detector.
    """
    requirements = ["INT-TEST-AOESW-1005"]
    completionType = immediate
  }

  {
    name = LGS_WFS_DETECTOR
    description = """
       |LGS_WFS_DETECTOR command will configure the exposure parameters for the LGS WFS.
    """
    requirements = [
      "INT-TEST-AOESW-1010"
    ]
    parameters = [
      {
        name = intTime
        type = float
        units = second
        description = "integration time"
      }
    ]
    completionType = longRunning
    result = {
      description = "XXX TODO: Add description of the result here."
      parameters = [{
        name = intTime
        type = float
        units = second
        description = "integration time"
      }]
    }
  }

  {
    name = LGS_WFS_DETECTOR2
    description = """
       |LGS_WFS_DETECTOR2 command will configure the exposure parameters for the LGS WFS.
    """
    ref = LGS_WFS_DETECTOR
  }
]

