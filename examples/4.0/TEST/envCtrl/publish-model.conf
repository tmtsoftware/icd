subsystem = TEST
component = env.ctrl

publish {

  description = __TODO__ - Add optional top-level description of published items here.


  events = [
    {
      name = logToFile
      category = ARCHIVE
      description = """sensor values logged to file enabled: $`[x^n + y^n = z^n]`$ and then : $`[z^n-1 + y^n+1 = x^n]`$ and so on,
      or
      ```math
      [x^n + y^n = z^n]
      ```
      """
      archive = true
      parameters = [
        {
          name = position
          description = "The current position of the instrument (for testing)"
          type = eqCoord
        }
        {
          name = enabled
          description = "True if logging to file is enabled"
          type = boolean
        }
        {
          name = stringParam1
          description = "Example of a string parameter with a known min/max length (both optional)"
          type = string
          minLength = 4
          maxLength = 5
          default = "hello"
        }
        {
          name = stringParam2a
          description = "Example of a string parameter with a known max length (optional)"
          type = string
          maxLength = 5
          default = "world"
        }
        {
          name = stringParam2b
          description = "Example of a string parameter with a fixed length"
          type = string
          minLength = 5
          maxLength = 5
        }
        {
          name = stringParam2c
          description = "Example of a string parameter with a known min length (optional)"
          type = string
          minLength = 5
        }
        {
          name = filename
          description = "path and file name of the engineering log file"
          type = string
        }
        {
          name = date
          description = "a TAI time value"
          type = taiTime
        }
      ]
    }
    {
      name = heartbeat
      parameters = [
        {
          name = heartbeat
          description = "software heartbeat"
          type = integer
        }
      ]
    }
  ]

  // Note: All observe events are prefedined in the ESW icd model files (https://github.com/tmt-icd/ESW-Model-Files).
  // The names for observe events that are fired need only be listed. The details will be taken from the ESW model files.
  // For this unrealistic example, all of the possible obseve events are listed.
  observeEvents = [
    ObserveStart
    ObserveEnd
    ExposureStart
    ExposureEnd
    ReadoutEnd
    ReadoutFailed
    DataWriteStart
    DataWriteEnd
    ExposureAborted
    PrepareStart

    // IRDetector specific
    IRDetectorExposureData
    IRDetectorExposureState

    // OpticalDetector specific
    OpticalDetectorExposureData
    OpticalDetectorExposureState

    // WFSDetector specific
    WfsDetectorExposureState
    PublishSuccess
    PublishFail

    // Sequencer specific
    PresetStart
    PresetEnd
    GuidestarAcqStart
    GuidestarAcqEnd
    ScitargetAcqStart
    ScitargetAcqEnd
    ObservationStart
    ObservationEnd
    ObservePaused
    ObserveResumed
    DowntimeStart

    // DMS specific
    MetadataAvailable
    ExposureAvailable
  ]

  currentStates = [
    {
      name = "sensors"
      description = "temperature sensor values"
      parameters = [
        {
          name = temp_ngsWfs
          description = "NGS WFS temperature"
          type = float
          units = kelvin
          exclusiveMinimum: -inf
          exclusiveMaximum: inf
          allowNaN: true
        }
        {
          name = temp_lgsWfs
          description = "LGS WFS temperature"
          type = float
          units = kelvin
          exclusiveMinimum: 0
          exclusiveMaximum: 100
          allowNaN: true
        }
        {
          name = temp_morTwfs
          description = "MOR TWFS temperature"
          type = float
          units = kelvin
          minimum: -inf
          maximum: inf
          allowNaN: true
        }
        {
          name = temp_nacq
          description = "NACQ camera temperature"
          type = float
          units = kelvin
        }
        {
          name = temp_nhrwfs
          description = "NHRWFS temperature"
          type = float
          units = kelvin
        }
        {
          name = temp_dm0
          description = "DM0 temperature"
          type = float
          units = kelvin
        }
        {
          name = temp_dm11
          description = "DM11 temperature"
          type = float
          units = kelvin
        }
        {
          name = temp_ndme
          description = "NDME crate temperatures"
          type = array
          dimensions: [7]
          items = {
            type = float
            units = kelvin
          }
        }
        {
          name = temp_ntts
          description = "NTTS temperature"
          type = float
          units = kelvin
        }
        {
          name = temp_nttsElec
          description = "NTTS electronics temperature"
          type = float
          units = kelvin
        }
        {
          name = temp_actuator
          description = "motor & piezo actuator temperatures"
          type = array
          dimensions: [30]
          items = {
            type = float
            minimum = 1.234
            units = kelvin
          }
        }
      ]
    }
    {
      name = state
      parameters = [
        {
          name = state
          description = "overall state"
          enum = [idle, busy, error]
        }
      ]
    }
    {
      name = initialized
      parameters = [
        {
          name = initialized
          description = "initialized state"
          type = boolean
        }
      ]
    }
  ]
}
