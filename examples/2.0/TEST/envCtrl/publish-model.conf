subsystem = TEST
component = env.ctrl

publish {

  description = __TODO__ - Add optional top-level description of published items here.


  events = [
    {
      name = logToFile
      description = """sensor values logged to file enabled: $`[x^n + y^n = z^n]`$ and then : $`[z^n-1 + y^n+1 = x^n]`$ and so on,
      or
      ```math
      [x^n + y^n = z^n]
      ```
      """
      archive = true
      attributes = [
        {
          name = position
          description = "The current position of the instrument (for testing)"
          type = eqCoord
        }
        {
          name = enabled
          description = "True if logging to file is enabled"
          type = boolean
        }
        {
          name = filename
          description = "path and file name of the engineering log file"
          type = string
        }
        {
          name = date
          description = "a TAI date value"
          type = taiDate
        }
        {
          name = structTest
          description = "Test struct"
          type = struct
          attributes = [
            {
              name = field1
              description = "struct field 1"
              type = string
            }
            {
              name = field2
              description = "struct field 2"
              type = integer
            }
          ]
        }
        {
          name = dm
          description = """
            Parameters for each DM.
            See: [This is a document internal link](#env.ctrl-publishes-Event-TEST.env.ctrl.structTestEvent).
          """
          type = array
          minItems: 1
          maxItems: 2
          uniqueItems: true
          items = {
            type: struct
            attributes = [
              {
                name = index
                description = "Description of index field"
                type = integer
                minimum: 0
                maximum: 1
              }
              {
                name = friedParameter
                description = "Description of friedParameter field"
                type = float
                units: meter
              }
              {
                name = windVelocity
                description = "Description of windVelocity field"
                type = array
                dimensions: [2]
                items {
                  type: float
                  units: meter
                }
              }
            ]
          }
        }
      ]
    }
    {
      name = structTestEvent
      description = "Dummy event for testing struct members"
      archive = true
      attributes = [
        {
          name = structTest
          description = "Test struct"
          type = struct
          attributes = [
            {
              name = field1
              description = "struct field 1"
              type = string
            }
            {
              name = field2
              description = "struct field 2"
              type = integer
            }
            {
              name = field3
              description = "struct field 3"
              type = struct
              attributes = [
                {
                  name = field3.1
                  description = "struct field 3.1"
                  type = string
                }
                {
                  name = field3.2
                  description = "struct field 3.2"
                  type = float
                  units = "&mu;m of RMS wavefront error in FCRS<sub>174.5</sub>"
                }
              ]
            }
          ]
        }
        {
          name = dm
          description = "Parameters for each DM"
          type = array
          minItems: 1
          maxItems: 2
          uniqueItems: true
          items = {
            type: struct
            attributes = [
              {
                name = index
                description = "Description of index field"
                type = integer
                minimum: 0
                maximum: 1
              }
              {
                name = friedParameter
                description = "Description of friedParameter field"
                type = float
                units: meter
              }
              {
                name = windVelocity
                description = "Description of windVelocity field"
                type = array
                dimensions: [2]
                items {
                  type: float
                  units: meter
                }
              }
            ]
          }
        }
      ]
    }
    {
      name = heartbeat
      attributes = [
        {
          name = heartbeat
          description = "software heartbeat"
          type = integer
        }
      ]
    }
  ]

  observeEvents = [
    {
      name = obs1
      description = "sensor XXX values logged to file enabled"
      archive = true
      attributes = [
        {
          name = enabled
          description = "True if logging to file is enabled"
          type = boolean
        }
        {
          name = filename
          description = "path and file name of the engineering log file"
          type = string
        }
        {
          name = date
          description = "a TAI date value"
          type = taiDate
        }
      ]
    }
    {
      name = obs2
      attributes = [
        {
          name = heartbeat
          description = "software heartbeat"
          type = integer
        }
      ]
    }
  ]

  currentStates = [
    {
      name = "sensors"
      description = "temperature sensor values"
      attributes = [
        {
          name = temp_ngsWfs
          description = "NGS WFS temperature"
          type = float
          units = degC
        }
        {
          name = temp_lgsWfs
          description = "LGS WFS temperature"
          type = float
          units = degC
        }
        {
          name = temp_morTwfs
          description = "MOR TWFS temperature"
          type = float
          units = degC
        }
        {
          name = temp_nacq
          description = "NACQ camera temperature"
          type = float
          units = degC
        }
        {
          name = temp_nhrwfs
          description = "NHRWFS temperature"
          type = float
          units = degC
        }
        {
          name = temp_dm0
          description = "DM0 temperature"
          type = float
          units = degC
        }
        {
          name = temp_dm11
          description = "DM11 temperature"
          type = float
          units = degC
        }
        {
          name = temp_ndme
          description = "NDME crate temperatures"
          type = array
          dimensions: [7]
          items = {
            type = float
            units = degC
          }
        }
        {
          name = temp_ntts
          description = "NTTS temperature"
          type = float
          units = degC
        }
        {
          name = temp_nttsElec
          description = "NTTS electronics temperature"
          type = float
          units = degC
        }
        {
          name = temp_actuator
          description = "motor & piezo actuator temperatures"
          type = array
          dimensions: [30]
          items = {
            type = float
            minimum = 1.234
            units = degC
          }
        }
      ]
    }
    {
      name = state
      attributes = [
        {
          name = state
          description = "overall state"
          enum = [idle, busy, error]
        }
      ]
    }
    {
      name = initialized
      attributes = [
        {
          name = initialized
          description = "initialized state"
          type = boolean
        }
      ]
    }
  ]

  alarms = [
    {
      name = "maxTemperature"
      description = "Warns when temperature too high"
      requirements = [TBD]
      severityLevels = [Warning, Major]
      location = "TBD"
      alarmType = Calculated
      probableCause = "The coolant system is not operating properly"
      operatorResponse = "Shutdown computer systems and electronics and check coolant system and supply."
      autoAck = false
      latched = false
    }
    {
      name = "minTemperature"
      description = "Warns when temperature too low"
      requirements = [TBD]
      location = "TBD"
      alarmType = Calculated
      probableCause = "The coolant system is not operating properly"
      operatorResponse = "Shutdown computer systems and electronics and check coolant system and supply."
      autoAck = true
      latched = true
    }
    {
      name = limit
      description = "The NGS FSM stage has reached a limit. It is not possible to position the FSM."
      requirements = [TBD]
      severityLevels = [Major]
      location = "NGS FSM stage"
      alarmType = System
      probableCause = "The PFSM HCD was commanded without the knowledge of the assembly, or the configured soft limits are incorrect."
      operatorResponse = "Execute the datum command"
      autoAck = false
      latched = true
    }
    {
      name = temperaturePbX
      description = """
    Power bar X temperature is outside acceptable limits.
    This may result in damaged equipment or electronics failure.
    (during build there will be one of these states published for each of the N bars)
  """
      requirements = [TBD]
      severityLevels = [Warning, Major]
      location = "Here or there"
      alarmType = System
      probableCause = "The power bar is overloaded, or the cooling system is not functioning correctly."
      operatorResponse = """
    <ul>
        <li><b>Major:</b> Shutdown computer systems and electronics and check coolant system and supply. </li>
        <li><b>Minor:</b> Review operation of the cooling system to ensure fans and temperatures are running under
          normal operational conditions and the coolant is flowing correctly.
          Ensure enclosure doors are closed properly during operation. </li>
   </ul>
  """
      autoAck = false
      latched = false
    }
  ]
}
