# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                           controllers.Application.index

# Gets a list of top level subsystem names
GET         /subsystems                                 controllers.Application.subsystemNames

# Gets a list of all system events by subsystem/component (for latest subsystem versions)
GET         /eventList                                  controllers.Application.eventList

# Gets top level information about a given version of the given subsystem
GET         /subsystemInfo/:subsystem                   controllers.Application.subsystemInfo(subsystem, version: Option[String])

# Gets a list of components belonging to the given version of the given subsystem
GET         /components/:subsystem                      controllers.Application.components(subsystem, version: Option[String])

# Gets information about a given component in a given version of the given subsystem
GET         /componentInfo/:subsystem                   controllers.Application.componentInfo(subsystem, version: Option[String], component: Option[String], searchAll: Option[Boolean], clientApi: Option[Boolean])

# Gets information about a component in a given version of an ICD
GET         /icdComponentInfo/:subsystem/:target        controllers.Application.icdComponentInfo(subsystem, version: Option[String], component: Option[String], target, targetVersion: Option[String], targetComponent: Option[String])

# Gets the PDF for the given ICD
GET         /icdAsPdf/:subsystem/:target                controllers.Application.icdAsPdf(subsystem, version: Option[String], component: Option[String], target, targetVersion: Option[String], targetComponent: Option[String], icdVersion: Option[String], orientation: Option[String], fontSize: Option[Int], lineHeight: Option[String], paperSize: Option[String], details: Option[Boolean])

# Gets the PDF for the given ICD (using POST to pass list of expanded row ids)
POST        /icdAsPdf/:subsystem/:target                controllers.Application.icdAsPdf(subsystem, version: Option[String], component: Option[String], target, targetVersion: Option[String], targetComponent: Option[String], icdVersion: Option[String], orientation: Option[String], fontSize: Option[Int], lineHeight: Option[String], paperSize: Option[String], details: Option[Boolean])

# Gets the PDF for the given subsystem API
GET         /apiAsPdf/:subsystem                        controllers.Application.apiAsPdf(subsystem, version: Option[String], component: Option[String], searchAll: Option[Boolean], clientApi: Option[Boolean], orientation: Option[String], fontSize: Option[Int], lineHeight: Option[String], paperSize: Option[String], details: Option[Boolean])

# Gets the PDF for the given subsystem API (using POST to pass list of expanded row ids)
POST        /apiAsPdf/:subsystem                        controllers.Application.apiAsPdf(subsystem, version: Option[String], component: Option[String], searchAll: Option[Boolean], clientApi: Option[Boolean], orientation: Option[String], fontSize: Option[Int], lineHeight: Option[String], paperSize: Option[String], details: Option[Boolean])

# Gets an archived items report (PDF) for the given subsystem API (and component)
GET         /archivedItemsReport/:subsystem             controllers.Application.archivedItemsReport(subsystem, version: Option[String], component: Option[String], orientation: Option[String], fontSize: Option[Int], lineHeight: Option[String], paperSize: Option[String])

# Gets an archived items report (PDF) for the given subsystem API (and component)
GET         /archivedItemsReportFull                    controllers.Application.archivedItemsReportFull(orientation: Option[String], fontSize: Option[Int], lineHeight: Option[String], paperSize: Option[String])

# Generates a graph of selected component relationships
GET         /makeGraph/:subsystem                       controllers.Application.makeGraph(subsystem, version: Option[String], component: Option[String], target: Option[String], targetVersion: Option[String], targetComponent: Option[String], icdVersion: Option[String], ratio: Option[Double], missingEvents: Option[Boolean], missingCommands: Option[Boolean], commandLabels: Option[Boolean], eventLabels: Option[Boolean], groupSubsystems: Option[Boolean], layout: Option[String], overlap: Option[String], splines: Option[Boolean], omitTypes: Option[String], imageFormat: Option[String])

# Gets the detailed information about the versions of a component or subsystem
GET         /versions/:name                             controllers.Application.getVersions(name)

# Gets a list of version names for a component or subsystem
GET         /versionNames/:name                         controllers.Application.getVersionNames(name)

# Gets a list of published ICD names
GET         /icdNames                                   controllers.Application.getIcdNames

# Gets a list of versions for the ICD from subsystem to target
GET         /icdVersions/:subsystem/:target             controllers.Application.getIcdVersions(subsystem, target)

# Uploads ICD files from a selected directory, all at once as multipart/formdata
POST        /uploadFiles                                controllers.FileUploadController.uploadFiles

# Gets the differences between two versions (version strings separated by a comma)
GET         /diff/:subsystem/:versions                  controllers.Application.diff(subsystem, versions)

# Returns OK(true) if this is a public icd web server (upload not allowed,publish allowed, password protected)
GET         /isPublicServer                             controllers.Application.isPublicServer

# Gets PublishInfo for every subsystem
GET         /getPublishInfo                             controllers.Application.getPublishInfo(subsystem: Option[String])

# Checks if the given GitHub user and password are valid for publish
POST        /checkGitHubCredentials                     controllers.Application.checkGitHubCredentials()

# Checks if the given user and password are valid for using the web app
POST        /checkCredentials                           controllers.Application.checkCredentials()

# Checks if the user is already logged in
GET         /checkForCookie                             controllers.Application.checkForCookie()

# Logs out of the web app
POST        /logout                                     controllers.Application.logout()

# Publishes a given subsystem API on GitHub
POST        /publishApi                                 controllers.Application.publishApi()

# Publishes an ICD on GitHub
POST        /publishIcd                                 controllers.Application.publishIcd()

# Unublishes a given subsystem API on GitHub
POST        /unpublishApi                               controllers.Application.unpublishApi()

# Unublishes an ICD on GitHub
POST        /unpublishIcd                               controllers.Application.unpublishIcd()

# Updates the cache of published APIs and ICDs (in case new ones were published)
POST        /updatePublished                            controllers.Application.updatePublished()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                               controllers.Assets.versioned(file)

GET         /robots.txt                                 controllers.Assets.at(path="/public", file="robots.txt")

# WebJars
->          /webjars                                    webjars.Routes



